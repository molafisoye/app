rm(list=ls())
ReQ_packages = c("BiocManager", "optparse")
BioCpackages = c("edgeR")
for (pack in 1:length(ReQ_packages)) {
if(ReQ_packages[pack] %in% rownames(installed.packages()) == FALSE) {
install.packages(ReQ_packages[pack])
}
}
for (pack in 1:length(BioCpackages)){
if (BioCpackages[pack] %in% rownames(installed.packages()) == FALSE){
BiocManager::install(BioCpackages[pack])
}
}
suppressWarnings(library(edgeR))
suppressWarnings(library(optparse))
input_path = "C:\\Users\\vn\\OneDrive\\Documents\\Projects\\20200130_edgeR\\data\\20200204_OneRNA_breast_V01.gene_symbols.csv"
output_path = "C:\\Users\\vn\\OneDrive\\Documents\\Projects\\20200130_edgeR\\out\\20200218_edgeR_V01_01"
design_matrix_path = "C:\\Users\\vn\\OneDrive\\Documents\\Projects\\20200130_edgeR\\data\\20200204_OneRNA_breast_V01.gene_symbols.design_matrix.csv"
project_id = "20200218_edgeR_V01_01_p_0_1"
p_value = 0.1
main <- function(input_path, output_path, design_matrix_path, project_id, p_value){
print("reading in files...")
df = read.csv(input_path, header=TRUE)
design_df <- read.csv(design_matrix_path, header=TRUE)
df.dedup <- df[!duplicated(df$SYMBOL) & !is.na(df$SYMBOL),]
row.names(df.dedup) <- df.dedup$SYMBOL
df.dedup <- df.dedup[,-c(1)] #remove symbol column now that the row names are gene names
### Create experimental design matrix
column_names <- colnames(df.dedup)
design_df$tissue_patient_ <- ifelse(design_df$tissue_type=='TUMOR',
paste(design_df$patient_id, design_df$sample_type ,sep='_'),
'NORMAL')
design <- model.matrix(~0+tissue_patient_, data=design_df)
row.names(design) <- column_names
#groups <- determine_groups(column_names)
dat <- DGEList(counts=df.dedup, group = design_df$tissue_type)
sample_summary <- dat$samples
keep <- filterByExpr(dat,min.count = 10, min.total.count = 15) # filter out lowly expressed genes
dat.filtered <- dat[keep, , keep.lib.size=FALSE]
filtered_summary <- dat.filtered$samples
###Normalization in edgeR from documentation on TMM
print("calculating normalization factors...")
dat.filtered <- calcNormFactors(dat.filtered)
#plotMDS(dat.filtered, col = as.numeric(dat.filtered$samples$group), labels = dat.filtered$samples$group)
#legend(x="topright",legend=unique(dat.filtered$samples$group), col=c('black', 'red'))
norm_summary <- dat.filtered$samples
print('calculating dispersion estimates...')
dat.filtered <- estimateDisp(dat.filtered, design)
#plotBCV(dat.filtered)
###Creating summary statistics dataframe
summary_counts <- sample_summary[,c('lib.size', 'group')]
summary_counts[,"filtered_lib_size"] <- filtered_summary$lib.size
summary_counts[,c('normalization factor')] <- norm_summary[,c("norm.factors")]
summary_counts[,"group"] <- dat.filtered$samples$group
print('Writing out resulting counts after filtering and normalization factors')
write.csv(summary_counts, file = paste(output_path,'\\',project_id,'.gene_count_summary.csv', sep=''))
#### Using GLM method
print('Fitting data...')
fit <- glmFit(dat.filtered, design)
contrast_levels <- colnames(design)[colnames(design)!="tissue_patient_NORMAL" ]
#print(contrast_levels)
print(paste('Threshold set to p=', p_value))
count = 0
for (index in 1:length(contrast_levels)){
#print(paste("index",index))
count = count + 1
sample_name <- contrast_levels[index]
print(sample_name)
my.contrasts <- makeContrasts('NormalVsTumor'=paste('tissue_patient_NORMAL','-',sample_name, sep=''), levels=design)
qlf <- glmLRT(fit, contrast = my.contrasts)
deGenes <- decideTests(qlf, p = p_value)
#print(sample_name)
print(paste("Writing out results", count, '/', length(contrast_levels)))
write.csv(qlf$table, file = paste(output_path,'\\',project_id,'_',sample_name,'.edgeR_stats.csv', sep=''))
plot_md_DEG(qlf,paste(output_path,'\\',project_id,'_',sample_name,'.edgeR_smear.png', sep=''),sample_name)
deGenes_dat <- deGenes@.Data
colnames(deGenes_dat)[1] <- sample_name
write.table(deGenes_dat, file = paste(output_path,'\\',project_id,'_',sample_name,'.edgeR_results.txt', sep=''),sep='\t', row.names = TRUE)
}
}
plot_MDS <- function(DGE_object, output_path){
png(output_path,    # create PNG for the heat map
width = 10*300,        # 10 x 300 pixels
height = 10*300,
res = 300,            # 300 pixels per inch
pointsize = 12)        # smaller font size
plotMDS(DGE_object, col = as.numeric(DGE_object$samples$group), labels = NULL, pch=20)
legend(legend=DGE_object$samples$group, col=as.numeric(DGE_object$samples$group))
dev.off()
}
plot_md_DEG <- function(DE_object, output_path, sample_name){
png(output_path,    # create PNG for the heat map
width = 10*300,        # 10 x 300 pixels
height = 10*300,
res = 300,            # 300 pixels per inch
pointsize = 12)        # smaller font size
plotMD(DE_object, main=sample_name)
abline(h=c(-1,1), col="green")
dev.off()
}
option_list <- list(
make_option(c("-i", "--input"), type = "character", default=NULL,
help = "OneRNA raw gene counts"),
make_option(c("-d", "--design"), type = "character", default=NULL,
help = "OneRNA raw gene counts"),
make_option(c("-p", "--project_id"), type = "character", default=NULL,
help = "project id"),
make_option(c("-o", "--output"), type = "character", default=NULL,
help = "directory to save resulting files"),
make_option(c("--p_value"), type = "double", default=0.05,
help = "p-value cut-off")
)
opt <- parse_args(OptionParser(option_list = option_list))
main(opt$input, opt$output,opt$design, opt$project_id, opt$p_value)
?makeContrasts
rm(list=ls())
ReQ_packages = c("BiocManager", "optparse", "dplyr")
BioCpackages = c("edgeR", "GO.db")
for (pack in 1:length(ReQ_packages)) {
if(ReQ_packages[pack] %in% rownames(installed.packages()) == FALSE) {
install.packages(ReQ_packages[pack])
}
}
for (pack in 1:length(BioCpackages)){
if (BioCpackages[pack] %in% rownames(installed.packages()) == FALSE){
BiocManager::install(BioCpackages[pack])
}
}
suppressWarnings(library(edgeR))
suppressWarnings(library(optparse))
suppressWarnings(library(dplyr))
input_path = "/home/vn/Documents/projects/onerna-article-analysis/data/raw/edgeR_test_data/20200204_OneRNA_breast_V01.gene_symbols.csv"
output_path = "/home/vn/Documents/projects/onerna-article-analysis/data/interim/edgeR_test_out"
design_matrix_path = "/home/vn/Documents/projects/onerna-article-analysis/data/raw/edgeR_test_data/20200204_OneRNA_breast_V01.gene_symbols.design_matrix.csv"
design_matrix_path = "/home/vn/Documents/projects/onerna-article-analysis/data/raw/edgeR_test_data/20200204_OneRNA_breast_V01.gene_symbols.multi-groups.csv"
project_id = "multi-test"
p_value = 0.1
main <- function(input_path, output_path, design_matrix_path, project_id, p_value){
print("reading in files...")
#print(class(input_path))
df = read.csv(file=input_path, header=TRUE, stringsAsFactors = F)
design_df <- read.csv(design_matrix_path, header=TRUE, stringsAsFactors = F)
df.dedup <- df[!duplicated(df$ENSEMBL) & !is.na(df$ENSEMBL),]
print(paste('Number of duplicate entries removed:', as.character(nrow(df)-nrow(df.dedup))))
row.names(df.dedup) <- df.dedup$ENSEMBL
#df.dedup <- df.dedup[,-c('ENSEMBL')] #remove ENSEMBL column now that the row names are gene names
df.dedup <- select(df.dedup, -ENSEMBL)
nums <- unlist(lapply(df.dedup, is.numeric))
df_num <- df.dedup[,nums]
df_num <- df_num[,order(colnames(df_num))] #Order column headers
design_df <- design_df[order(design_df$sample_id),] #Order by sample_id
### Create experimental design matrix
column_names <- colnames(df_num)
design_df['group'] = lapply(design_df['group'], as.factor)
design <- model.matrix(~0+group, data=design_df)
colnames(design) <- levels(design_df$group)
### Check that the column headers and design matrix sample ids match
if (length(column_names) != length(design_df$sample_id)){
print('Design matrix and count header lengths do not match!')
return()
}
row.names(design) <- column_names #Make row names sample IDs
### Filter for low counts and grab metrics for later analysis
print('Filtering for low counts...')
dat <- DGEList(counts=df_num, group = design_df$group)
sample_summary <- dat$samples
keep <- filterByExpr(dat,min.count = 10, min.total.count = 15) # filter out lowly expressed genes
dat.filtered <- dat[keep, , keep.lib.size=FALSE]
filtered_summary <- dat.filtered$samples
###Normalization in edgeR from documentation on TMM
print("Calculating normalization factors...")
dat.filtered <- calcNormFactors(dat.filtered)
#calculuating dispersion estimates
norm_summary <- dat.filtered$samples
print('Calculating dispersion estimates...')
dat.filtered <- estimateDisp(dat.filtered, design)
#plotBCV(dat.filtered)
###Creating summary statistics dataframe
summary_counts <- sample_summary[,c('lib.size', 'group')]
summary_counts[,"filtered_lib_size"] <- filtered_summary$lib.size
summary_counts[,c('normalization factor')] <- norm_summary[,c("norm.factors")]
summary_counts[,"group"] <- dat.filtered$samples$group
print('Writing out resulting counts after filtering and normalization factors')
write.csv(summary_counts, file = paste(output_path,'/',project_id,'.gene_count_summary.csv', sep=''))
### Create figures
#logcpm <- cpm(dat.filtered, log=TRUE)
#heatmap(logcpm, Rowv=NA, Colv = "Rowv", xlab = 'sample_id')
#### Fitting data
print('Fitting data...')
fit <- glmQLFit(dat.filtered, design)
groups = colnames(design)
#print(groups)
#return()
for (ii in 1:length(groups)){
for (jj in 1:length(groups)){
if (ii==jj){
next()
}
group_1 = groups[ii]
group_2 = groups[jj]
Group1vsGroup2 = paste(group_1, '-', group_2, sep='')
print(paste('Evaluating contrast:', Group1vsGroup2))
my.contrasts <- makeContrasts(contrasts=paste(group_1, '-', group_2, sep=''), levels=design)
qlf <- glmLRT(fit, contrast=my.contrasts)
deGenes <- decideTests(qlf, p = p_value, lfc=2)
deGenes_dat <- deGenes@.Data
colnames(deGenes_dat)[1] <- paste(group_1, '-', group_2, sep='')
goana(qlf)
topGO(go, ont="BP", sort="Up", n=30, truncate=30)
plot_md_DEG(qlf,paste(output_path,'/',project_id,'_',Group1vsGroup2,'.edgeR_smear.png', sep=''),project_id)
write.csv(qlf$table, file = paste(output_path,'/',project_id,'_',Group1vsGroup2,'.edgeR_raw.csv', sep=''))
write.table(deGenes_dat, file = paste(output_path,'/',project_id,'_',Group1vsGroup2,'.edgeR_deGenes.txt', sep=''),sep='\t', row.names = TRUE)
}
}
}
map_ensembl_to_entrez <- function(Ensembl){
DB        <- select(
x       = org.Hs.eg.db,
keys    = Ensembl,
columns = c("ENTREZID"),
#columns = columns(org.Hs.eg.db),
keytype = "ENSEMBL")
# take the first id, removal alternative gene symbol
DB <- DB[!duplicated(DB$ENSEMBL),]
return(DB)
}
plot_md_DEG <- function(DE_object, output_path, sample_name){
png(output_path,    # create PNG for the heat map
width = 10*300,        # 10 x 300 pixels
height = 10*300,
res = 300,            # 300 pixels per inch
pointsize = 12)        # smaller font size
plotMD(DE_object, main=sample_name)
abline(h=c(-1,1), col="green")
dev.off()
}
option_list <- list(
make_option(c("-i", "--input"), type = "character", default=NULL,
help = "OneRNA raw gene counts"),
make_option(c("-d", "--design"), type = "character", default=NULL,
help = "OneRNA raw gene counts"),
make_option(c("-p", "--project_id"), type = "character", default=NULL,
help = "project id"),
make_option(c("-o", "--output"), type = "character", default=NULL,
help = "directory to save resulting files"),
make_option(c("--p_value"), type = "double", default=0.05,
help = "p-value cut-off")
)
opt <- parse_args(OptionParser(option_list = option_list))
main(opt$input, opt$output,opt$design, opt$project_id, opt$p_value)
?filterByExpr()
?decideTests
rm(list=ls())
#Load requeired function libraries
ReQ_packages = c("ggplot2", "optparse", "reshape2", "plyr")
for (pack in 1:length(ReQ_packages)) {
if(ReQ_packages[pack] %in% rownames(installed.packages()) == FALSE) {
install.packages(ReQ_packages[pack], repos='http://cran.us.r-project.org')
}
}
suppressWarnings(library(ggplot2))
suppressWarnings(library(reshape2))
suppressWarnings(library(plyr))
suppressWarnings(library(optparse))
#Macbook WD
#setwd("~/Dropbox (Genomic Expression)/R Code/Rutgers Breast")
#clinical_data_path <- "C:\\Users\\vn\\OneDrive\\Documents\\Projects\\20191120_production_post_gct\\data\\find_abberant\\BRCA_clinical_data_20190129.csv"
#gene_count_inputs_path <- "C:\\Users\\vn\\OneDrive\\Documents\\Projects\\20191120_production_post_gct\\data\\find_abberant\\30SOQPR_BioIVT_Rutgers_FF_FFPE_BRCA_Normals_GEx1.6_sub5M_NST_Subset1.csv"
#genelist_path <- "C:\\Users\\vn\\OneDrive\\Documents\\Projects\\20191120_production_post_gct\\data\\find_abberant\\OneRNA_panels.csv"
#output_path = "C:\\Users\\vn\\OneDrive\\Documents\\Projects\\20191120_production_post_gct\\out"
gene_count_inputs_path = "test_gene_count.csv"
#genelist_path = "C:\\Users\\vn\\OneDrive\\Documents\\Projects\\20200210_MT1A\\MT1A.csv"
output_path = "."
project_id = "test"
main <- function(gene_count_inputs_path, genelist_path, output_path, project_id){
cases <- read.csv(gene_count_inputs_path, header = TRUE, stringsAsFactors = FALSE, row.names = 1)
cases.genelist <-t(cases)
cases.genelist <-as.data.frame(cases.genelist)
#cases.genelist.melt <-melt(cases.genelist, measure.vars = 1:ncol(cases.genelist), variable.name="SYMBOL", value.name = "Expression")
#COMPARE TO NORMAL TISSUES
# Extract normal tissue data from all cases
#breast
norms <- cases.genelist[grepl('_NT_log2$|_NT$', rownames(cases.genelist)), ]
norms.m <- reshape2::melt(norms, measure.vars = 1:ncol(norms), variable.name="SYMBOL", value.name = "Expression")
#Compute boxplot stats for all genes in all"normals"
A <- boxplot(Expression~SYMBOL, data=norms.m, plot = FALSE, range = 1.5)
boxstats <- A[["stats"]]
colnames(boxstats)<-A$names
rownames(boxstats)<-c('Min','Q1','Median','Q3','Max')
stat_df <- data.frame(t(boxstats))
stat_df$IQR <-as.matrix(stat_df[1:nrow(stat_df),"Max"]-stat_df[1:nrow(stat_df), "Min"])
stat_df$OVER <- stat_df[1:nrow(stat_df), "Max"]
stat_df$UNDER <- stat_df[1:nrow(stat_df), "Min"]
stat_df$HIGH <- stat_df[1:nrow(stat_df), "Median"]+2*stat_df[1:nrow(stat_df),"IQR"]
stat_df$LOW <- stat_df[1:nrow(stat_df), "Median"]-2*stat_df[1:nrow(stat_df),"IQR"]
write.csv(boxstats, file=paste(output_path, "/", project_id,"_thresholds.csv", sep=""))
#CASE SELECTION
#Include all input cases in the analysis
caselist  <- as.matrix(colnames(cases))
# Load expression profiles for selected cases into a matrix
exp_data <- as.matrix(t(cases.genelist[rownames(cases.genelist) %in% caselist,]))
#Compile over and under expression status for all selected cases and genes
num_genes <- ncol(cases.genelist)
genes.over <-as.matrix(exp_data[1:num_genes, ]  > boxstats[1:num_genes, "Max"])
genes.under <-as.matrix(exp_data[1:num_genes, ]  < boxstats[1:num_genes, "Min"])
IQR <-as.matrix(boxstats[1:num_genes, "Max"]-boxstats[1:num_genes, "Min"])
genes.high <-as.matrix(exp_data[1:num_genes, ]  > boxstats[1:num_genes, "Median"]+2*IQR[1:num_genes])
genes.low <-as.matrix(exp_data[1:num_genes, ]  < boxstats[1:num_genes, "Median"]-2*IQR[1:num_genes])
genes.states <- genes.high
genes.states[] <- "NORMAL"
genes.states[genes.over] <- "OVER"
genes.states[genes.under] <- "UNDER"
genes.states[genes.high] <- "HIGH"
genes.states[genes.low] <- "LOW"
### melt gene states so that for each sample, we know aberrant expressed genes
genes.states.m <- melt(genes.states, varnames = c('SYMBOL', 'SAMPLE_ID'))
genes.stats.m.aberrant <- genes.states.m[genes.states.m$value != 'NORMAL',]
# # #Save data to files
write.csv(genes.states, paste(output_path,'/',project_id,"_select_gene_states.csv", sep=''))
write.csv(genes.stats.m.aberrant, paste(output_path,'/',project_id,"_aberrant_gene_states.csv", sep=''))
aberrant_counts <-cbind(t(rbind(colSums(genes.under, na.rm=T), colSums(genes.over, na.rm=T))))
#aberrant_counts <-cbind(t(rbind(colSums(genes.low), colSums(genes.high))))
aberrant_counts <- as.data.frame(aberrant_counts)
aberrant_counts$NORMAL_SAMPLE <- 0
aberrant_counts[grepl('_NT_log2$|_NT$', rownames(aberrant_counts)),'NORMAL_SAMPLE'] <- 1
colnames(aberrant_counts) <- c("UNDER/LOW", "OVER/HIGH", "NORMAL")
write.csv(aberrant_counts, paste(output_path, '/',project_id,"_aberrant_counts.csv", sep = ''))
}
option_list <- list(
make_option(c("-i", "--input_gct"), type = "character", default=NULL,
help = "OneRNA normalized gene count table"),
make_option(c("-g", "--gene_list"), type = "character", default=NULL,
help = "OneRNA genes of interest where the first column will be taken as the genes of interest. List must be greater than 1"),
make_option(c("-o", "--output"), type = "character", default=NULL,
help = "Output path"),
make_option(c("-p", "--project_id"), type = "character", default=NULL,
help = "project id to write files to")
)
opt <- parse_args(OptionParser(option_list = option_list))
main(opt$input_gct, opt$gene_list, opt$output, opt$project_id)
cases <- read.csv(gene_count_inputs_path, header = TRUE, stringsAsFactors = FALSE, row.names = 1)
setwd("~/Documents/projects/onerna-call-aberrantly-expressed-genes/src")
cases <- read.csv(gene_count_inputs_path, header = TRUE, stringsAsFactors = FALSE, row.names = 1)
cases.genelist <-t(cases)
cases.genelist <-as.data.frame(cases.genelist)
#cases.genelist.melt <-melt(cases.genelist, measure.vars = 1:ncol(cases.genelist), variable.name="SYMBOL", value.name = "Expression")
#COMPARE TO NORMAL TISSUES
# Extract normal tissue data from all cases
#breast
norms <- cases.genelist[grepl('_NT_log2$|_NT$', rownames(cases.genelist)), ]
norms.m <- reshape2::melt(norms, measure.vars = 1:ncol(norms), variable.name="SYMBOL", value.name = "Expression")
#Compute boxplot stats for all genes in all"normals"
A <- boxplot(Expression~SYMBOL, data=norms.m, plot = FALSE, range = 1.5)
boxstats <- A[["stats"]]
colnames(boxstats)<-A$names
rownames(boxstats)<-c('Min','Q1','Median','Q3','Max')
stat_df <- data.frame(t(boxstats))
stat_df$IQR <-as.matrix(stat_df[1:nrow(stat_df),"Max"]-stat_df[1:nrow(stat_df), "Min"])
class(boxstats)
type()
class(A[["stats"]])
boxstats <- data.frame(A[["stats"]])
A <- boxplot(Expression~SYMBOL, data=norms.m, plot = FALSE, range = 1.5)
boxstats <- A[["stats"]]
colnames(boxstats)<-A$names
rownames(boxstats)<-c('Min','Q1','Median','Q3','Max')
stat_df <- t(boxstats)
stat_df <- data.matrix(t(boxstats))
stat_df <- as.data.frame(data.matrix(t(boxstats)))
stat_df <- data.matrix(t(boxstats))
dimnames(boxstats)
stat_df$Max
stat_df[['Max']]
A
stats
A$stats
input_dir <- "test_normalized.csv"
